"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _child_process = require("child_process");

var _utils = require("./utils");

var _key = require("./key");

var _key2 = _interopRequireDefault(_key);

var _parseKeyValue = require("./parse-key-value");

var _parseKeyValue2 = _interopRequireDefault(_parseKeyValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Schema = function () {
  _createClass(Schema, null, [{
    key: "getAll",
    value: function getAll() {

      var process = (0, _child_process.spawnSync)("gsettings", ["list-schemas"]);
      var output = (0, _utils.transformOutputToArray)(process.stdout);

      return output.map(function (id) {
        return new Schema(id);
      });
    }
  }, {
    key: "exists",
    value: function exists(id) {

      if (typeof id !== "string") {
        throw new TypeError("id is not a string.");
      }

      var process = (0, _child_process.spawnSync)("gsettings", ["list-keys", id]);
      var exitCode = process.status;

      return exitCode === 0;
    }
  }, {
    key: "findById",
    value: function findById(id) {

      if (!Schema.exists(id)) {
        return null;
      }

      return new Schema(id);
    }
  }]);

  function Schema(id) {
    _classCallCheck(this, Schema);

    this._id = id;
  }

  _createClass(Schema, [{
    key: "getId",
    value: function getId() {
      return this._id;
    }
  }, {
    key: "getKeys",
    value: function getKeys() {
      var _this = this;

      var process = (0, _child_process.spawnSync)("gsettings", ["list-keys", this._id]);
      var output = (0, _utils.transformOutputToArray)(process.stdout);

      return output.map(function (id) {
        return new _key2.default(_this, id);
      });
    }
  }, {
    key: "addListener",
    value: function addListener(listener) {
      var _this2 = this;

      if (typeof listener !== "function") {
        throw new TypeError("listener is not a function.");
      }

      var process = (0, _child_process.spawn)("gsettings", ["monitor", this.getId()]);

      process.stdout.on("data", function (data) {

        var dataTrimmed = data.toString().trim();
        var separator = dataTrimmed.indexOf(":");

        var keyId = dataTrimmed.substring(0, separator);
        var key = new _key2.default(_this2, keyId);

        var unparsedValue = dataTrimmed.substring(separator + 1);
        var value = (0, _parseKeyValue2.default)(unparsedValue);

        listener(key, value);
      });

      return function () {
        process.kill();
      };
    }
  }]);

  return Schema;
}();

exports.default = Schema;
module.exports = exports["default"];