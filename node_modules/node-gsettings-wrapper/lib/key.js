"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _child_process = require("child_process");

var _schema = require("./schema");

var _schema2 = _interopRequireDefault(_schema);

var _parseKeyValue = require("./parse-key-value");

var _parseKeyValue2 = _interopRequireDefault(_parseKeyValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Key = function () {
  _createClass(Key, null, [{
    key: "exists",
    value: function exists(schemaId, keyId) {

      if (typeof schemaId !== "string") {
        throw new TypeError("schemaId is not a string.");
      }

      if (typeof keyId !== "string") {
        throw new TypeError("keyId is not a string.");
      }

      var process = (0, _child_process.spawnSync)("gsettings", ["get", schemaId, keyId]);
      var exitCode = process.status;

      return exitCode === 0;
    }
  }, {
    key: "findById",
    value: function findById(schemaId, keyId) {

      if (!Key.exists(schemaId, keyId)) {
        return null;
      }

      return new Key(new _schema2.default(schemaId), keyId);
    }
  }]);

  function Key(schema, id) {
    _classCallCheck(this, Key);

    if (!(schema instanceof _schema2.default)) {
      throw new TypeError("schema is not a Schema.");
    }

    if (typeof id !== "string") {
      throw new TypeError("id is not a string.");
    }

    this._schema = schema;
    this._id = id;
  }

  _createClass(Key, [{
    key: "getSchema",
    value: function getSchema() {
      return this._schema;
    }
  }, {
    key: "getId",
    value: function getId() {
      return this._id;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var process = (0, _child_process.spawnSync)("gsettings", ["get", this._schema.getId(), this.getId()]);
      return (0, _parseKeyValue2.default)(process.stdout);
    }
  }, {
    key: "addListener",
    value: function addListener(listener) {
      var _this = this;

      if (typeof listener !== "function") {
        throw new TypeError("listener is not a function.");
      }

      var schemaId = this._schema.getId();
      var keyId = this.getId();

      var process = (0, _child_process.spawn)("gsettings", ["monitor", schemaId, keyId]);

      process.stdout.on("data", function (data) {
        var unparsedValue = data.toString().trim().replace(keyId + ":", "");
        var value = (0, _parseKeyValue2.default)(unparsedValue);
        listener(_this, value);
      });

      return function () {
        process.kill();
      };
    }
  }]);

  return Key;
}();

exports.default = Key;
module.exports = exports["default"];